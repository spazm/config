#!/bin/sh

set -e

# Track bug id for each branch.
#
# bug string value is stored in git config in key branch.<this branch>.bug
# Agnostic to the value of the bug, except that blank ("") or zero (0) values
# clear the key value.
#
# exits with non-zero status if key does not exist on retrieve
# exits with non-zero status if not on a named branch, except
# during merge/rebase.
#
# Usage:
#     git bug 1234  # set bug string for current branch to 1234
#     git bug 0     # delete the bug string for this branch
#     git bug ""    # delete the bug string for this branch
#     git bug       # retrieve the bug string for this branch

BUG_CONFIG_KEY="bug"

branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
if [ "$?" -ne 0 ]; then
    echo "not in a git repo!"
    exit 2
fi

if [ "$branch" = "HEAD" ]; then
    # DETACHED HEAD state.  Try to parse the rebase-merge head-name file
    head_name_file="$(git rev-parse --show-toplevel)/.git/rebase-merge/head-name"
    if [ -f "${head_name_file}" ]; then
        # refs/head/abc -> abc; refs/head/feature/foo -> feature/foo
        branch=$(cut -f3- -d/ $head_name_file)
    else
        # ignore DETACHED HEAD state.
        exit 1
    fi
fi

bug_key="branch.$branch.${BUG_CONFIG_KEY}"

if [ $# -gt 0 ]; then
    if [ -z "$1" -o "$1" = "0" ]; then
        echo "delete bug for branch:$branch"
        git config --unset "$bug_key"
    else
        bug="$*"
        echo "setting bug:$bug on branch:$branch"
        git config $bug_key "$bug"
    fi
else
    git config --get $bug_key
fi
